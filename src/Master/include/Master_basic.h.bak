#ifndef MASTER_BASIC_H_
#define MASTER_BASIC_H_

#include "CBB_socket.h"
#include "CBB_dir.h"
#include "CBB_rwlocker.h"
#include "CBB_map.h"
#include "CBB_set.h"

namespace CBB
{
	namespace Master
	{
		class Master;

		class open_file_info;

		class Master_extended_file_stat; 

		typedef CBB::Common::CBB_map<off64_t, ssize_t> node_t; 
		typedef CBB::Common::CBB_set<ssize_t> node_pool_t;
		typedef CBB::Common::CBB_set<Master_extended_file_stat*> items_set_t;

		extern Master_extended_file_stat* find_by_name(const std::string filename, Master_extended_file_stat* current_directory);

		class node_info
		{
			public:
				//set file_no
				friend class Master;
				typedef std::set<ssize_t> file_no_pool_t;
				node_info(ssize_t id,
						const std::string& ip,
						std::size_t total_memory,
						int socket); 
				ssize_t get_id()const;
				std::string& get_ip()const;
			private:
				int socket;
				ssize_t node_id;
				std::string ip; 
				file_no_pool_t stored_files; 
				std::size_t avaliable_memory; 
				std::size_t total_memory;
		}; 

		class Master_extended_file_stat: public CBB::Common::_basic_item
		{
			public:
				friend Master;
				//Master_extended_file_stat(
				//Master_buffered_open_file_info* opened_open_file_info);
				Master_extended_file_stat(const struct stat& file_stat,
						const std::string& filename,
						int exist_flag);
				Master_extended_file_stat();
				virtual ~Master_extended_file_stat();
				//const std::string& get_path()const;
				bool is_external()const;
				bool exist()const;
				int get_external_master();
				std::string& get_external_name();
			private:
				int external_flag;
				int external_master;
				std::string external_name;
				int exist_flag;
				//file_stat_t::iterator it;
		};

		class Master_file: public Master_extended_file_stat
		{
			public:
				friend Master;
				Master_file(const struct stat& file_stat,
						const std::string& filename,
						int exist_flag);

				Master_file(const struct stat& file_stat,
						const std::string& filename,
						open_file_info* opened_file_info_p,
						int exist_flag);

				Master_file(open_file_info* opened_file_info_p);
				virtual ~Master_file();
				ssize_t get_fd()const;
				ssize_t get_fd();
			private:
				open_file_info* opened_file_info;
		};

		class Master_dir: public Master_extended_file_stat
		{
			public:
				friend Master;
				friend Master_extended_file_stat* find_by_name(const std::string filename, Master_extended_file_stat* current_directory);
				Master_dir(const struct stat& file_stat,
						const std::string& file_path,
						int exist_flag);
				virtual ~Master_dir();
				items_set_t::iterator add_item(Master_extended_file_stat* item);
				items_set_t& get_files();
				const items_set_t& get_files()const;
				void remove_item(Master_extended_file_stat* item);
				void remove_item(const std::string& file_name);
				void remove_item(const items_set_t::iterator& it);

			private:
				items_set_t items;
		};

		class open_file_info:public CBB::Common::CBB_rwlocker
		{
			public:
				//map file start_point:node_id
				friend class Master_file;
				friend class Master;

				open_file_info(ssize_t fileno,
						size_t block_size,
						const node_t& IOnodes,
						int flag,
						CBB::Common::_basic_item* file_stat); 
				open_file_info(ssize_t fileno,
						int flag,
						CBB::Common::_basic_item* file_stat);
				void _set_nodes_pool();
				const std::string& get_path()const;
				struct stat& get_stat();
				const struct stat& get_stat()const;
			private:
				ssize_t file_no;
				node_t p_node;
				node_pool_t nodes;
				size_t block_size;
				int open_count;
				//open file
				int flag; 
				CBB::Common::_basic_item* file_status;
		}; 

		inline bool Master_extended_file_stat::is_external()const
		{
			return EXTERNAL == external_flag;
		}

		inline bool Master_extended_file_stat::exist()const
		{
			return EXISTING == exist_flag;
		}

		inline int Master_extended_file_stat::get_external_master()
		{
			return external_master;
		}

		inline std::string& Master_extended_file_stat::get_external_name()
		{
			return external_name;
		}

		inline const std::string& open_file_info::get_path()const
		{
			return file_status->CBB::Common::_basic_item::get_filefullpath();
		}

		/*inline const std::string& Master_extended_file_stat::get_path()const
		{
			return it->first;
		}*/

		inline ssize_t Master_file::get_fd()
		{
			if(NULL != opened_file_info)
			{
				return opened_file_info->file_no;
			}
			else
			{
				return -1;
			}
		}

		inline ssize_t Master_file::get_fd()const
		{
			if(NULL != opened_file_info)
			{
				return opened_file_info->file_no;
			}
			else
			{
				return -1;
			}
		}
	}
}

#endif
